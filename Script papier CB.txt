library(mrgsolve)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(ggsci)
library(flextable)
library(officer)
library(tidyr)
Library(reshape2)

setwd("D:/MOBILITE/Charles B/VF/")

my_theme <- theme_minimal(base_size = 16) +
  theme(
    axis.title = element_text(size = 18, color = "black"),      # Axis labels size and color
    axis.text = element_text(size = 16, color = "black"),       # Axis ticks size and color
    axis.line = element_line(linewidth = 1.5),                  # Axis lines size
    legend.title = element_text(size = 18, color = "black"),    # Legend title size and color
    legend.text = element_text(size = 16, color = "black")      # Legend text size and color
  )


# Define the PK model
Luque <- '
$PROB
$PARAM @annotated
TVCL : 16.6  : 1  Clearance (L.h-1)
TVVC : 43.2  : 2  Central volume (L)
TVVP : 47 : 3 Peripheral volume (L)
TVQ : 3.1 : Intercompartimental clearance peripheral (L.h-1)
TVVCSF : 0.11 : CSF Volume (L)
TVQCSF : 0.05 : Intercompartimental clearance CSF (L.h-1)



$OMEGA @block
0.225 // CL
0 0.0231 // VC
0 0 0.082 // VP
0 0 0 0.582 // Q
0 0 0 0 0 // VCSF
0 0 0 0 0 0 // QCSF


$SIGMA 
0 // err prop
0 //  err additive


$CMT @annotated
CENTRAL : Central compartment (mg/L) [ADM] [OBS]
CSF : CSF compartment (mg/L) [OBS]
PERIPHERAL : Peripheral compartment (mg/L)
AUCP : AUC in Plasma (mg/L.h)
AUCCSF : AUC in CSF (mg/L.h)


$TABLE
double DV  = (CENTRAL / VC) ;
double DVCSF = (CSF / VCSF);
double DVf = DV*0.69;


$MAIN
double CL = TVCL *exp(ETA(1))   ;
double VC = TVVC *exp(ETA(2))  ;
double VP = TVVP *exp(ETA(3))   ;
double Q = TVQ * exp(ETA(4)) ;
double VCSF = TVVCSF ;
double QCSF = TVQCSF ;
double K10 = CL/VC;
double K12 = Q/VC;
double K21 = Q/VP;
double K13 = QCSF/VC;
double K31 = QCSF/VCSF;


$ODE

dxdt_CENTRAL      = -K10* CENTRAL - K12*CENTRAL - K13 * CENTRAL + K21*PERIPHERAL + K31 * CSF ;
dxdt_CSF    = K13*CENTRAL - K31 * CSF ;
dxdt_PERIPHERAL = K12*CENTRAL - K21*PERIPHERAL ;
dxdt_AUCP = DVf;
dxdt_AUCCSF = DVCSF;

$CAPTURE DV DVf DVCSF '

library(mrgsolve)
library(dplyr)

# Define the Luque model
Luque_mod <- mrgsolve::mcode("Luque_optim", Luque, atol=1e-8, rtol=1e-8, maxsteps=5000)

# Define the dosing events with Luque_ prefix
Luque_events <- list(
  `600q12h` = ev(amt = 600, rate = 600, cmt = 1, ii = 12, addl = 20),
  `600q8h` = ev(amt = 600, rate = 600, cmt = 1, ii = 8, addl = 20),
  `600q6h` = ev(amt = 600, rate = 600, cmt = 1, ii = 6, addl = 20),
  `1200q24hCI` = ev(amt = 4800, rate = 50, cmt = 1, ii = 0, addl = 0),
  `1800q24hCI` = ev(amt = 7200, rate = 75, cmt = 1, ii = 0, addl = 0),
  `2400q24hCI` = ev(amt = 9600, rate = 100, cmt = 1, ii = 0, addl = 0)
)

n_individuals <- 1000
Luque_results <- list()
Luque_model_name <- "Luque"  # Add the model name here
MIC_values <- c(0.25, 0.5, 1, 2, 4, 8, 16, 32)  # Define the MIC thresholds

Luque_PTA_results <- list()  # Store PTA results with Luque_ prefix

# Function to calculate % of patients with fT > MIC for at least 85% of the time
calc_pta_for_MIC <- function(data, MIC) {
  # Group by ID and check if >= 85% of the time is above the MIC
  Luque_pta_DVf <- data %>%
    group_by(ID) %>%
    summarize(fT_above_MIC = mean(DVf >= MIC)) %>%
    summarize(Luque_PTA_DVf = mean(fT_above_MIC >= 0.85) * 100)  # % of patients with fT > MIC for >= 85% of the time
  
  Luque_pta_DVCSF <- data %>%
    group_by(ID) %>%
    summarize(fT_above_MIC = mean(DVCSF >= MIC)) %>%
    summarize(Luque_PTA_DVCSF = mean(fT_above_MIC >= 0.85) * 100)  # % of patients with fT > MIC for >= 85% of the time
  
  return(c(Luque_PTA_DVf = Luque_pta_DVf$Luque_PTA_DVf, Luque_PTA_DVCSF = Luque_pta_DVCSF$Luque_PTA_DVCSF))
}

for (Luque_event_name in names(Luque_events)) {
  Luque_ev_current <- Luque_events[[Luque_event_name]]
  
  # Run the simulation for the current event
  Luque_out <- Luque_mod %>%
    ev(Luque_ev_current) %>%
    mrgsim(nid = n_individuals, delta = 0.1, end = 96, obsonly = TRUE)
  
  # Extract data for time points between 72 and 96 hours
  Luque_out_72_96 <- Luque_out %>%
    as.data.frame() %>%
    filter(time >= 72 & time <= 96)
  
  # Calculate PTA for each MIC value
  Luque_PTA_fractions <- sapply(MIC_values, function(MIC) {
    calc_pta_for_MIC(Luque_out_72_96, MIC)
  })
  
  # Convert to data frame and store results
  Luque_PTA_fractions_df <- as.data.frame(t(Luque_PTA_fractions))
  colnames(Luque_PTA_fractions_df) <- c("Luque_PTA_DVf", "Luque_PTA_DVCSF")
  Luque_PTA_fractions_df$MIC <- MIC_values
  Luque_PTA_fractions_df$Luque_Dosing <- Luque_event_name  # Add dosing regimen
  Luque_PTA_fractions_df$Model <- "Luque"  # Add Model column
  
  # Rename columns to remove Luque_ prefix
  Luque_PTA_fractions_df <- Luque_PTA_fractions_df %>%
    rename(
      PTA_DVf = Luque_PTA_DVf,
      PTA_DVCSF = Luque_PTA_DVCSF,
      Dosing = Luque_Dosing,
      Model = Model  # Keep the Model column
    )

  # Store the PTA results for each event
  Luque_PTA_results[[Luque_event_name]] <- Luque_PTA_fractions_df
}

# Combine all PTA results into one data frame
Luque_PTA_combined_results <- bind_rows(Luque_PTA_results)



# Define the PK model
Li <- '
$PROB
$PARAM @annotated
TVCL : 6.86  : 1  Clearance (L.h-1)
TVVC : 52  : 2  Central volume (L)
TVVCSF : 0.11 : CSF Volume (L)
TVQCSF : 0.02 : Intercompartimental clearance CSF (L.h-1)
TVPC : 0.72 : Transfer Multiplier
TVCLCSF : 0.00833 : CSF Drainage Volume (L.h-1)

$PARAM @annotated @covariates

CrCl : 90 : Creatinine clearance (mL/min/1.73mÂ²)
CrCl_CL : -0.8 : Creatinine Clearance on CL
PCT : 0.87 : Effect of Proton Pump Inhibitor on KA
PCT_Q : 0.25 : Effect of PCT on PC

$OMEGA @block
0.0098 // CL
0 0.0031 // VC
0 0 0 // VCSF
0 0 0 0.0244 // QCSF
0 0 0 0 0.0036 // PC
0 0 0 0 0 0.0000018 // CLCSF
0 0 0 0 0 0 0.1002 // CrCl_CL
0 0 0 0 0 0 0 0.125 // PCT_Q


$SIGMA 
0 // err prop
0 //  err additive


$CMT @annotated
CENTRAL : Central compartment (mg/L) [ADM] [OBS]
CSF : CSF compartment (mg/L) [OBS]
AUCP : AUC in Plasma (mg/L.h)
AUCCSF : AUC in CSF (mg/L.h)


$TABLE
double DV  = (CENTRAL / VC) ;
double DVCSF = (CSF / VCSF);
double DVf = DV*0.69;

$MAIN
double CL = TVCL *exp(ETA(1))* pow((CrCl/97.87),(CrCl_CL*exp(ETA(8))))   ;
double VC = TVVC *exp(ETA(2))  ;
double VCSF = TVVCSF ;
double QCSF = TVQCSF *exp(ETA(4))* pow((PCT/0.86),(PCT_Q*exp(ETA(9)))) ;
double PC = TVPC*exp(ETA(5));
double CLCSF = TVCLCSF * exp(ETA(6)) ;
double K10 = CL/VC;
double K12 = QCSF/VC;
double K21 = QCSF/VCSF;
double KCSF = CLCSF/TVVCSF;



$ODE

dxdt_CENTRAL      = -K10* CENTRAL - (K12*PC)*CENTRAL + K21*CSF  ;
dxdt_CSF    = K12*CENTRAL - K21*CSF - KCSF*CSF ;
dxdt_AUCP = DVf;
dxdt_AUCCSF = DVCSF;

$CAPTURE DV DVf DVCSF'


# Define the Li model
Li_mod <- mrgsolve::mcode("Li_optim", Li, atol=1e-8, rtol=1e-8, maxsteps=5000)

# Define the dosing events with Li_ prefix
Li_events <- list(
  `600q12h` = ev(amt = 600, rate = 600, cmt = 1, ii = 12, addl = 20),
  `600q8h` = ev(amt = 600, rate = 600, cmt = 1, ii = 8, addl = 20),
  `600q6h` = ev(amt = 600, rate = 600, cmt = 1, ii = 6, addl = 20),
  `1200q24hCI` = ev(amt = 4800, rate = 50, cmt = 1, ii = 0, addl = 0),
  `1800q24hCI` = ev(amt = 7200, rate = 75, cmt = 1, ii = 0, addl = 0),
  `2400q24hCI` = ev(amt = 9600, rate = 100, cmt = 1, ii = 0, addl = 0)
)

n_individuals <- 1000
Li_results <- list()
Li_model_name <- "Li"  # Add the model name here
MIC_values <- c(0.25, 0.5, 1, 2, 4, 8, 16, 32)  # Define the MIC thresholds

Li_PTA_results <- list()  # Store PTA results with Li_ prefix

for (Li_event_name in names(Li_events)) {
  Li_ev_current <- Li_events[[Li_event_name]]
  
  # Run the simulation for the current event
  Li_out <- Li_mod %>%
    ev(Li_ev_current) %>%
    mrgsim(nid = n_individuals, delta = 0.1, end = 96, obsonly = TRUE)
  
  # Extract data for time points between 72 and 96 hours
  Li_out_72_96 <- Li_out %>%
    as.data.frame() %>%
    filter(time >= 72 & time <= 96)
  
# Function to calculate % of patients with fT > MIC for at least 85% of the time
calc_pta_for_MIC <- function(data, MIC) {
  # Group by ID and check if >= 85% of the time is above the MIC
  Li_pta_DVf <- data %>%
    group_by(ID) %>%
    summarize(fT_above_MIC = mean(DVf >= MIC)) %>%
    summarize(Li_PTA_DVf = mean(fT_above_MIC >= 0.85) * 100)  # % of patients with fT > MIC for >= 85% of the time
  
  Li_pta_DVCSF <- data %>%
    group_by(ID) %>%
    summarize(fT_above_MIC = mean(DVCSF >= MIC)) %>%
    summarize(Li_PTA_DVCSF = mean(fT_above_MIC >= 0.85) * 100)  # % of patients with fT > MIC for >= 85% of the time
  
  return(c(Li_PTA_DVf = Li_pta_DVf$Li_PTA_DVf, Li_PTA_DVCSF = Li_pta_DVCSF$Li_PTA_DVCSF))
}
  # Calculate PTA for each MIC value
  Li_PTA_fractions <- sapply(MIC_values, function(MIC) {
    calc_pta_for_MIC(Li_out_72_96, MIC)
  })
  
  # Convert to data frame and store results
  Li_PTA_fractions_df <- as.data.frame(t(Li_PTA_fractions))
  colnames(Li_PTA_fractions_df) <- c("Li_PTA_DVf", "Li_PTA_DVCSF")
  Li_PTA_fractions_df$MIC <- MIC_values
  Li_PTA_fractions_df$Li_Dosing <- Li_event_name  # Add dosing regimen
  Li_PTA_fractions_df$Model <- "Li"  # Add Model column
  
  # Rename columns to remove Li_ prefix
  Li_PTA_fractions_df <- Li_PTA_fractions_df %>%
    rename(
      PTA_DVf = Li_PTA_DVf,
      PTA_DVCSF = Li_PTA_DVCSF,
      Dosing = Li_Dosing,
      Model = Model  # Remove prefix from the Model column
    )

  # Store the PTA results for each event
  Li_PTA_results[[Li_event_name]] <- Li_PTA_fractions_df
}

# Combine all PTA results into one data frame
Li_PTA_combined_results <- bind_rows(Li_PTA_results)







n_individuals <- 1000
Luque_results <- list()
Luque_model_name <- "Li"  # Add the model name here
MIC_values <- c(0.25, 0.5, 1, 2, 4, 8, 16, 32)  # Define the MIC thresholds

Luque_AUC_PTA_results <- list()  # Store PTA results for AUC/MIC > 10

for (Luque_event_name in names(Luque_events)) {
  Luque_ev_current <- Luque_events[[Luque_event_name]]
  
  # Run the simulation for the current event
  Luque_out <- Luque_mod %>%
    ev(Luque_ev_current) %>%
    mrgsim(nid = n_individuals, delta = 0.1, end = 96, obsonly = TRUE)
  
  # Extract data for time points between 72 and 96 hours
  Luque_out_72_96 <- Luque_out %>%
    as.data.frame() %>%
    filter(time >= 72 & time <= 96)
  
  # Summarize the AUC for AUCP and AUCCSF between 72 and 96 hours
  Luque_AUC_summary <- Luque_out_72_96 %>%
    group_by(ID) %>%
    summarize(
      AUCP_72_96 = max(AUCP) - min(AUCP),           # Calculate AUC for plasma as difference between max and min
      AUCCSF_72_96 = max(AUCCSF) - min(AUCCSF)      # Calculate AUC for CSF as difference between max and min
    ) %>%
    mutate(Dosing = factor(Luque_event_name),          # Add a column for event as a factor
           Model = factor(Luque_model_name))           # Add a column for model as a factor
  
  # Function to calculate PTA for AUC/MIC > 10
  calc_pta_for_AUC_MIC <- function(data, MIC) {
    # Calculate the AUC/MIC ratio and determine if it is greater than 10
    Luque_pta_AUCP <- data %>%
      mutate(AUC_MIC_P = AUCP_72_96 / MIC) %>% 
      summarize(PTA_AUCP = mean(AUC_MIC_P > 100) * 100)  # % of patients with AUC/MIC > 10
    
    Luque_pta_AUCCSF <- data %>%
      mutate(AUC_MIC_CSF = AUCCSF_72_96 / MIC) %>%
      summarize(PTA_AUCCSF = mean(AUC_MIC_CSF > 100) * 100)  # % of patients with AUC/MIC > 10
    
    return(c(PTA_AUCP = Luque_pta_AUCP$PTA_AUCP, PTA_AUCCSF = Luque_pta_AUCCSF$PTA_AUCCSF))
  }
  
  # Calculate PTA for each MIC value
  Luque_PTA_AUC <- sapply(MIC_values, function(MIC) {
    calc_pta_for_AUC_MIC(Luque_AUC_summary, MIC)
  })
  
  # Convert to data frame and store results
  Luque_PTA_AUC_df <- as.data.frame(t(Luque_PTA_AUC))
  colnames(Luque_PTA_AUC_df) <- c("PTA_AUCP", "PTA_AUCCSF")
  Luque_PTA_AUC_df$MIC <- MIC_values
  Luque_PTA_AUC_df$Dosing <- Luque_event_name  # Add dosing regimen
  Luque_PTA_AUC_df$Model <- "Luque"  # Add Model column
  
  # Store the PTA results for each event
  Luque_AUC_PTA_results[[Luque_event_name]] <- Luque_PTA_AUC_df
}

# Combine all PTA results into one data frame
Luque_AUC_combined_results <- bind_rows(Luque_AUC_PTA_results)







n_individuals <- 1000
Li_results <- list()
Li_model_name <- "Li"  # Add the model name here
MIC_values <- c(0.25, 0.5, 1, 2, 4, 8, 16, 32)  # Define the MIC thresholds

Li_AUC_PTA_results <- list()  # Store PTA results for AUC/MIC > 10

for (Li_event_name in names(Li_events)) {
  Li_ev_current <- Li_events[[Li_event_name]]
  
  # Run the simulation for the current event
  Li_out <- Li_mod %>%
    ev(Li_ev_current) %>%
    mrgsim(nid = n_individuals, delta = 0.1, end = 96, obsonly = TRUE)
  
  # Extract data for time points between 72 and 96 hours
  Li_out_72_96 <- Li_out %>%
    as.data.frame() %>%
    filter(time >= 72 & time <= 96)
  
  # Summarize the AUC for AUCP and AUCCSF between 72 and 96 hours
  Li_AUC_summary <- Li_out_72_96 %>%
    group_by(ID) %>%
    summarize(
      AUCP_72_96 = max(AUCP) - min(AUCP),           # Calculate AUC for plasma as difference between max and min
      AUCCSF_72_96 = max(AUCCSF) - min(AUCCSF)      # Calculate AUC for CSF as difference between max and min
    ) %>%
    mutate(Dosing = factor(Li_event_name),          # Add a column for event as a factor
           Model = factor(Li_model_name))           # Add a column for model as a factor
  
  # Function to calculate PTA for AUC/MIC > 10
  calc_pta_for_AUC_MIC <- function(data, MIC) {
    # Calculate the AUC/MIC ratio and determine if it is greater than 10
    Li_pta_AUCP <- data %>%
      mutate(AUC_MIC_P = AUCP_72_96 / MIC) %>% 
      summarize(PTA_AUCP = mean(AUC_MIC_P > 100) * 100)  # % of patients with AUC/MIC > 10
    
    Li_pta_AUCCSF <- data %>%
      mutate(AUC_MIC_CSF = AUCCSF_72_96 / MIC) %>%
      summarize(PTA_AUCCSF = mean(AUC_MIC_CSF > 100) * 100)  # % of patients with AUC/MIC > 10
    
    return(c(PTA_AUCP = Li_pta_AUCP$PTA_AUCP, PTA_AUCCSF = Li_pta_AUCCSF$PTA_AUCCSF))
  }
  
  # Calculate PTA for each MIC value
  Li_PTA_AUC <- sapply(MIC_values, function(MIC) {
    calc_pta_for_AUC_MIC(Li_AUC_summary, MIC)
  })
  
  # Convert to data frame and store results
  Li_PTA_AUC_df <- as.data.frame(t(Li_PTA_AUC))
  colnames(Li_PTA_AUC_df) <- c("PTA_AUCP", "PTA_AUCCSF")
  Li_PTA_AUC_df$MIC <- MIC_values
  Li_PTA_AUC_df$Dosing <- Li_event_name  # Add dosing regimen
  Li_PTA_AUC_df$Model <- "Li"  # Add Model column
  
  # Store the PTA results for each event
  Li_AUC_PTA_results[[Li_event_name]] <- Li_PTA_AUC_df
}

# Combine all PTA results into one data frame
Li_AUC_combined_results <- bind_rows(Li_AUC_PTA_results)






























combined_results_AUC <- bind_rows(Luque_AUC_combined_results, Li_AUC_combined_results)
combined_results_AUC$Model <- factor(combined_results_AUC$Model, levels = c("Li","Luque"))

combined_results_fT <- bind_rows(Luque_PTA_combined_results, Li_PTA_combined_results)
combined_results_fT$Model <- factor(combined_results_fT$Model, levels = c("Li","Luque"))




# Define the Li model
Li_mod <- mrgsolve::mcode("Li_optim", Li, atol=1e-8, rtol=1e-8, maxsteps=5000)

# Define the dosing events for Li (similar to Luque)
Li_events <- list(
  `600q12h` = ev(amt = 600, rate = 600, cmt = 1, ii = 12, addl = 20),
  `600q8h` = ev(amt = 600, rate = 600, cmt = 1, ii = 8, addl = 20),
  `600q6h` = ev(amt = 600, rate = 600, cmt = 1, ii = 6, addl = 20),
  `1200q24hCI` = ev(amt = 4800, rate = 50, cmt = 1, ii = 0, addl = 0),
  `1800q24hCI` = ev(amt = 7200, rate = 75, cmt = 1, ii = 0, addl = 0),
  `2400q24hCI` = ev(amt = 9600, rate = 100, cmt = 1, ii = 0, addl = 0)
)

n_individuals <- 1000
Li_results <- list()
Li_model_name <- "Li"  # Add the model name here

for (Li_event_name in names(Li_events)) {
  Li_ev_current <- Li_events[[Li_event_name]]
  
  # Run the simulation for the current event
  Li_out <- Li_mod %>%
    ev(Li_ev_current) %>%
    mrgsim(nid = n_individuals, delta = 0.1, end = 96, obsonly = TRUE)
  
  # Add Dosing Regimen and Model Name to Li_out
  Li_out_data <- Li_out@data %>%
    mutate(Dosing = Li_event_name, Model = Li_model_name)
  
  # Store the results
  Li_results[[Li_event_name]] <- Li_out_data
}

# Combine all results from the Li model into a single data frame
Li_combined_results <- bind_rows(Li_results)






# Now we need to add dosing regimen to the existing Luque simulation outputs
Luque_results <- list()

for (Luque_event_name in names(Luque_events)) {
  Luque_ev_current <- Luque_events[[Luque_event_name]]
  
  # Run the simulation for the current event
  Luque_out <- Luque_mod %>%
    ev(Luque_ev_current) %>%
    mrgsim(nid = n_individuals, delta = 0.1, end = 96, obsonly = TRUE)
  
  # Add Dosing Regimen and Model Name to Luque_out
  Luque_out_data <- Luque_out@data %>%
    mutate(Dosing = Luque_event_name, Model = "Luque")
  
  # Store the results
  Luque_results[[Luque_event_name]] <- Luque_out_data
}

# Combine all results from the Luque model into a single data frame
Luque_combined_results <- bind_rows(Luque_results)






# Combine Li and Luque results into a single data frame
combined_results_sim <- bind_rows(Li_combined_results, Luque_combined_results)


# Filter data where time is between 72 and 96 hours, then group and summarize
min_values <- combined_results_sim %>%
  filter(time >= 72 & time <= 96) %>%
  group_by(Dosing, Model, ID) %>%
  summarise(
    min_DVf = min(DVf, na.rm = TRUE),
    min_DVCSF = min(DVCSF, na.rm = TRUE),
    # Calculate AUC from 72 to 96 hours for plasma (AUCP) and CSF (AUCCSF)
    AUCP_72_96 = max(AUCP, na.rm = TRUE) - min(AUCP, na.rm = TRUE),
    AUCCSF_72_96 = max(AUCCSF, na.rm = TRUE) - min(AUCCSF, na.rm = TRUE)
  )

min_values <- min_values %>%
  mutate(
    min_DVf = round(min_DVf, 2),          # Round min_DVf to 2 decimal places
    min_DVCSF = round(min_DVCSF, 2),      # Round min_DVCSF to 2 decimal places
    AUCP_72_96 = round(AUCP_72_96, 0),  # Round AUC for plasma to whole numbers
    AUCCSF_72_96 = round(AUCCSF_72_96, 0)  # Round AUC for CSF to whole numbers
  )




# Compute statistics for AUCP_72_96 and AUCCSF_72_96
summary_stats <- min_values %>%
  dplyr::group_by(Dosing, Model) %>%
  dplyr::summarise(
    Mean_AUCP = mean(AUCP_72_96),
    SD_AUCP = sd(AUCP_72_96),
    Median_AUCP = median(AUCP_72_96),
    IQR_AUCP = IQR(AUCP_72_96),
    Mean_AUCCSF = mean(AUCCSF_72_96),
    SD_AUCCSF = sd(AUCCSF_72_96),
    Median_AUCCSF = median(AUCCSF_72_96),
    IQR_AUCCSF = IQR(AUCCSF_72_96),
    Mean_DVf = mean(min_DVf),
    SD_DVf = sd(min_DVf),
    Median_DVf = median(min_DVf),
    IQR_DVf = IQR(min_DVf),
    Mean_DVCSF = mean(min_DVCSF),
    SD_DVCSF = sd(min_DVCSF),
    Median_DVCSF = median(min_DVCSF),
    IQR_DVCSF = IQR(min_DVCSF)
  )

summary_stats <- summary_stats %>%
  mutate(across(where(is.numeric), ~ sprintf("%.2f", .x)))



# Create a flextable from the formatted summary_stats dataframe
summary_table <- flextable(summary_stats)

# Adjust the table appearance for publication
summary_table <- summary_table %>%
  theme_vanilla() %>%                  # Apply a clean vanilla theme
  bold(part = "header") %>%            # Make header bold
  align(align = "center", part = "header") %>%  # Center-align header
  align(align = "right", part = "body") %>%     # Right-align numeric data
  autofit() %>%                        # Adjust column widths to fit content
  fontsize(size = 10, part = "all")     # Set font size

# Create a Word document and add the formatted table
doc <- read_docx() %>%
  body_add_flextable(value = summary_table)

# Save the Word document
print(doc, target = "summary_stats_table.docx")




# Summarize the data by time, model, and dosing regimen
summary_data_Plasma <- combined_results_sim %>%
  group_by(Model, Dosing, time) %>%
  summarize(
    median_DVf = median(DVf),
    lower_IQR = quantile(DVf, 0.25),
    upper_IQR = quantile(DVf, 0.75),
    lower_5th = quantile(DVf, 0.05),
    upper_95th = quantile(DVf, 0.95),
    .groups = 'drop'
  )


summary_data_Plasma$Dosing <- factor(summary_data_Plasma$Dosing, levels = c("600q12h", "600q8h", "600q6h", "1200q24hCI", "1800q24hCI", "2400q24hCI"))

SimDosing_Plasma <- ggplot(summary_data_Plasma, aes(x = time, y = median_DVf, color = Model)) + 
  
  # Ribbon for 5th to 95th percentile (more transparent for outer bounds)
  geom_ribbon(aes(ymin = lower_5th, ymax = upper_95th, fill = Model), alpha = 0.2) + 
  
  # Ribbon for 25th to 75th percentile (IQR)
  geom_ribbon(aes(ymin = lower_IQR, ymax = upper_IQR, fill = Model), alpha = 0.4) +
  
  # Line for median DVf
  geom_line(size = 1.5) + 
  
  facet_wrap(~ Dosing, scales = "free_x") +
  
  xlab("Time (hours)") + 
  ylab("LZD (mg/L)") +
  
  scale_color_jco() +  # Color scheme for lines
  scale_fill_jco() +    # Fill color scheme for ribbons
  
  ggtitle("LZD PK profile in plasma") + 
  my_theme + 
    theme(
    strip.background = element_blank(),   # Clean up facet strip background
    strip.placement = "outside"           # Position facet strips outside the plot
  )








# Summarize the data by time, model, and dosing regimen
summary_data_CSF <- combined_results_sim %>%
  group_by(Model, Dosing, time) %>%
  summarize(
    median_DVCSF = median(DVCSF),
    lower_IQR = quantile(DVCSF, 0.25),
    upper_IQR = quantile(DVCSF, 0.75),
    lower_5th = quantile(DVCSF, 0.05),
    upper_95th = quantile(DVCSF, 0.95),
    .groups = 'drop'
  )


summary_data_CSF$Dosing <- factor(summary_data_CSF$Dosing, levels = c("600q12h", "600q8h", "600q6h", "1200q24hCI", "1800q24hCI", "2400q24hCI"))

SimDosing_CSF <- ggplot(summary_data_CSF, aes(x = time, y = median_DVCSF, color = Model)) + 
  
  # Ribbon for 5th to 95th percentile (more transparent for outer bounds)
  geom_ribbon(aes(ymin = lower_5th, ymax = upper_95th, fill = Model), alpha = 0.2) + 
  
  # Ribbon for 25th to 75th percentile (IQR)
  geom_ribbon(aes(ymin = lower_IQR, ymax = upper_IQR, fill = Model), alpha = 0.4) +
  
  # Line for median DVf
  geom_line(size = 1.5) + 
  
  facet_wrap(~ Dosing, scales = "free_x")  +
  xlab("Time (hours)") + 
  ylab("LZD (mg/L))") +
  
  scale_color_jco() +  # Color scheme for lines
  scale_fill_jco() +    # Fill color scheme for ribbons
  
  ggtitle("LZD PK profile in CSF") + 
   my_theme + 
    theme(
    strip.background = element_blank(),   # Clean up facet strip background
    strip.placement = "outside"           # Position facet strips outside the plot
  )








combined_plot_Sim <- ggarrange(SimDosing_Plasma, SimDosing_CSF, 
                           ncol = 1, nrow = 2,  # Arrange plots vertically
                           labels = c("A", "B"),  # Add labels to the plots (optional)
                           common.legend = TRUE,  # Use a common legend for both plots
                           legend = "top")  # Position the legend at the top



png("D:/MOBILITE/Charles B/VF/Sim_Plot.png", width = 12, height = 16, units = 'in', res = 900)  # Specify width, height, and resolution

# Print the plot to the device
print(combined_plot_Sim)

# Close the device
dev.off()










combined_PTA_AUC_results$Dosing <- factor(combined_PTA_AUC_results$Dosing, levels = c("600q12h", "600q8h", "600q6h", "1200q24hCI", "1800q24hCI", "2400q24hCI"))
combined_results_fT$Dosing <- factor(combined_results_fT$Dosing, levels = c("600q12h", "600q8h", "600q6h", "1200q24hCI", "1800q24hCI", "2400q24hCI"))


# Define the MIC values
MIC_values <- c(0.002, 0.004, 0.008, 0.016, 0.03, 0.06, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512)

# Summing distributions for Staphylococcus spp. (includes aureus, MRSA, MSSA, epidermidis, etc.)
mic_staphylococcus <- c(0, 0, 0, 0, 0, 14, 160, 220, 1886, 20605, 40954, 6736, 42, 28, 10, 2, 1, 0, 0)  # Example total across species

# Summing distributions for Enterococcus spp. (includes faecalis, faecium, etc.)
mic_enterococcus <- c(0, 0, 0, 0, 0, 0, 24, 63, 1026, 18608, 25193, 876, 30, 10, 8, 0, 0, 0, 0)  # Summed

# Cutibacterium acnes
mic_cutibacterium_acnes <- c(0, 0, 0, 0, 0, 0, 0, 18, 184, 96, 6, 0, 0, 0, 0, 0, 0, 0, 0)

# Summing distributions for Streptococcus spp. (includes pneumoniae, pyogenes, etc.)
mic_streptococcus <- c(0, 0, 0, 0, 0, 21, 297, 882, 9294, 63598, 19792, 31, 1, 0, 0, 0, 0, 0, 0)  # Summed

# Create a data frame with summed distributions
mic_distribution <- data.frame(
  MIC_value = MIC_values,
  Staphylococcus_spp = mic_staphylococcus,
  Enterococcus_spp = mic_enterococcus,
  Cutibacterium_acnes = mic_cutibacterium_acnes,
  Streptococcus_spp = mic_streptococcus
)

# Calculate the average MIC distribution across the genera
mic_distribution$Average_MIC <- rowMeans(mic_distribution[, 2:5], na.rm = TRUE)

# View the MIC distribution table
print(mic_distribution)

# Define the MIC values
MIC_values <- c(0.002, 0.004, 0.008, 0.016, 0.03, 0.06, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512)

# Summing distributions for all species
mic_staphylococcus <- c(0, 0, 0, 0, 0, 14, 160, 220, 1886, 20605, 40954, 6736, 42, 28, 10, 2, 1, 0, 0)
mic_enterococcus <- c(0, 0, 0, 0, 0, 0, 24, 63, 1026, 18608, 25193, 876, 30, 10, 8, 0, 0, 0, 0)
mic_cutibacterium_acnes <- c(0, 0, 0, 0, 0, 0, 0, 18, 184, 96, 6, 0, 0, 0, 0, 0, 0, 0, 0)
mic_streptococcus <- c(0, 0, 0, 0, 0, 21, 297, 882, 9294, 63598, 19792, 31, 1, 0, 0, 0, 0, 0, 0)

# Sum across all species
mic_total_distribution <- mic_staphylococcus + mic_enterococcus + mic_cutibacterium_acnes + mic_streptococcus

# Create a data frame with the summed distribution
mic_distribution_total <- data.frame(
  MIC_value = MIC_values,
  Total_Distribution = mic_total_distribution
)

# View the total MIC distribution
print(mic_distribution_total)




# Filter MIC values between 0.25 and 32
filtered_mic_distribution <- mic_distribution_total %>%
  filter(MIC_value >= 0.25 & MIC_value <= 32)

# View the filtered MIC distribution
print(filtered_mic_distribution)



# Calculate the total count within this range
total_count <- sum(filtered_mic_distribution$Total_Distribution)

# Calculate the frequency as a percentage
filtered_mic_distribution <- filtered_mic_distribution %>%
  mutate(Percent_Frequency = (Total_Distribution / total_count) * 100)

# View the updated MIC distribution with percentages
print(filtered_mic_distribution)




# Assuming the filtered_mic_distribution contains the MIC frequencies
# Merge MIC frequency data with PTA data (combined_PTA_AUC_results)
combined_PTA_AUC_results <- merge(combined_results_AUC, filtered_mic_distribution, by.x = "MIC", by.y = "MIC_value")
combined_PTA_AUC_results$Dosing <- factor(combined_PTA_AUC_results$Dosing, levels = c("600q12h", "600q8h", "600q6h", "1200q24hCI", "1800q24hCI", "2400q24hCI"))

# First, add a new column to combined_PTA_AUC_results to represent the MIC distribution category
combined_PTA_AUC_results$MIC_Distribution <- "MIC Frequency (%)"

# Create the PTA plot for AUC/MIC > 100 for plasma
PTA_AUC_Plasma <- ggplot(combined_PTA_AUC_results  %>% filter(Model == "Li"), aes(x = factor(MIC))) + 
  geom_bar(aes(y = Percent_Frequency, fill = MIC_Distribution), stat = "identity", alpha = 0.8, width = 0.75) +  # MIC frequency as bars (only for Li or Luque model)
  geom_line(data = combined_PTA_AUC_results, aes(x = factor(MIC), y = PTA_AUCP, group = Model, color = Model), size = 1.5) +  # Line plot for PTA curves for both models
  geom_point(data = combined_PTA_AUC_results, aes(x = factor(MIC), y = PTA_AUCP, shape = Model), color = "black", size = 3) +  # Black points with different shapes for both models
  geom_hline(yintercept = 90, linetype = "dashed", color = "black", size = 1.5) +  # Dashed line at 90% PTA
  scale_color_jco() +  # Use the JCO color scheme
  scale_fill_manual(values = c("MIC Frequency (%)" = "darkgray"), name = "") +  # Set color for MIC distribution bars, customize legend
  scale_y_continuous(name = "PTA (%)", breaks = seq(0, 100, by = 10)) +  # Remove secondary axis
  facet_wrap(~ Dosing, scales = "free_x") +  # Facet by reordered dosing regimen with free x-axis scaling
  xlab("MIC (mg/L)") + 
  ylab("PTA (%) ") +
  ggtitle("PTA (AUC/MIC > 100 for plasma LZD concentration)") + 
  my_theme + 
  theme(
    strip.background = element_blank(),   # Clean up facet strip background
    strip.placement = "outside",          # Position facet strips outside the plot
    axis.text.y.right = element_text(color = "gray"),  # Make the right y-axis text gray to match the bars
    legend.title = element_text(size = 12),  # Customize the size of the legend title
    legend.position = "top"               # Position legend at the top
  )

# Create the PTA plot for AUC/MIC > 100 for CSF with MIC frequency as bars (same approach)
PTA_AUC_CSF <- ggplot(combined_PTA_AUC_results %>% filter(Model == "Li"), aes(x = factor(MIC))) + 
  geom_bar(aes(y = Percent_Frequency, fill = MIC_Distribution), stat = "identity", alpha = 0.5, width = 0.75) +  # MIC frequency as bars (only for Li or Luque model)
  geom_line(data = combined_PTA_AUC_results, aes(x = factor(MIC), y = PTA_AUCCSF, group = Model, color = Model), size = 1.5) +  # Line plot for PTA curves for both models
  geom_point(data = combined_PTA_AUC_results, aes(x = factor(MIC), y = PTA_AUCCSF, shape = Model), color = "black", size = 3) +  # Black points with different shapes for both models
  geom_hline(yintercept = 90, linetype = "dashed", color = "black", size = 1.5) +  # Dashed line at 90% PTA
  scale_color_jco() +  # Use the JCO color scheme
  scale_fill_manual(values = c("MIC Frequency (%)" = "darkgray"), name = "") +  # Set color for MIC distribution bars, customize legend
  scale_y_continuous(name = "PTA (%)", breaks = seq(0, 100, by = 10)) +  # Remove secondary axis
  facet_wrap(~ Dosing, scales = "free_x") +  # Facet by reordered dosing regimen with free x-axis scaling
  xlab("MIC (mg/L)") + 
  ylab("PTA (%) and MIC Distribution (%)") +
  ggtitle("PTA (AUC/MIC > 100 for CSF LZD concentration)") + 
  my_theme + 
  theme(
    strip.background = element_blank(),   # Clean up facet strip background
    strip.placement = "outside",          # Position facet strips outside the plot
    axis.text.y.right = element_text(color = "gray"),  # Make the right y-axis text gray to match the bars
    legend.title = element_text(size = 12),  # Customize the size of the legend title
    legend.position = "top"               # Position legend at the top
  )

# Combine both plots
combined_plot_PTA <- ggarrange(PTA_AUC_Plasma, PTA_AUC_CSF, 
                               ncol = 1, nrow = 2,  # Arrange plots vertically
                               labels = c("A", "B"),  # Add labels to the plots (optional)
                               common.legend = TRUE,  # Use a common legend for both plots
                               legend = "top")  # Position the legend at the top



png("D:/MOBILITE/Charles B/VF/PTA_AUC_Plot_MIC.png", width = 12, height = 16, units = 'in', res = 900)  # Specify width, height, and resolution

# Print the plot to the device
print(combined_plot_PTA)

# Close the device
dev.off()




# Merge the combined results with the MIC frequency table
# Assuming you merged filtered_mic_distribution with combined_results_fT
# Create the PTA plot for fT > MIC for plasma


# Merge the combined results with the MIC frequency table
combined_results_fT <- merge(combined_results_fT, filtered_mic_distribution, by.x = "MIC", by.y = "MIC_value")
combined_results_fT$Dosing <- factor(combined_results_fT$Dosing, levels = c("600q12h", "600q8h", "600q6h", "1200q24hCI", "1800q24hCI", "2400q24hCI"))
combined_results_fT$MIC_Distribution <- "MIC Frequency (%)"

PTA_fT_Plasma <- ggplot(combined_results_fT %>% filter(Model == "Li"), aes(x = factor(MIC))) + 
  geom_bar(aes(y = Percent_Frequency.x, fill = MIC_Distribution), stat = "identity", alpha = 0.5, width = 0.75) +  # MIC frequency as bars (for one model)
  geom_line(data = combined_results_fT, aes(x = factor(MIC), y = PTA_DVf, group = Model, color = Model), size = 1.5) +  # Line plot for PTA curves for both models
  geom_point(data = combined_results_fT, aes(x = factor(MIC), y = PTA_DVf, shape = Model), color = "black", size = 3) +  # Black points with different shapes for both models
  geom_hline(yintercept = 90, linetype = "dashed", color = "black", size = 1.5) +  # Dashed line at 90% PTA
  scale_color_jco() +  # Use the JCO color scheme
  scale_fill_manual(values = c("MIC Frequency (%)" = "darkgray"), name = "MIC Distribution (%)") +  # Set color for MIC distribution bars, customize legend
  scale_y_continuous(name = "PTA (%)", breaks = seq(0, 100, by = 10)) +  # Y-axis limits and breaks
  facet_wrap(~ Dosing, scales = "free_x") +  # Facet by reordered dosing regimen with free x-axis scaling
  xlab("MIC (mg/L)") + 
  ylab("PTA (%) and MIC Distribution (%)") +
  ggtitle("PTA (fT > MIC 85% for plasma LZD concentration)") + 
  my_theme + 
  theme(
    strip.background = element_blank(),   # Clean up facet strip background
    strip.placement = "outside",          # Position facet strips outside the plot
    axis.text.y.right = element_text(color = "gray"),  # Make the right y-axis text gray to match the bars
    legend.title = element_text(size = 12),  # Customize the size of the legend title
    legend.position = "top"               # Position legend at the top
  )

# Create the PTA plot for fT > MIC for CSF
PTA_fT_CSF <- ggplot(combined_results_fT %>% filter(Model == "Li"), aes(x = factor(MIC))) + 
  geom_bar(aes(y = Percent_Frequency, fill = MIC_Distribution), stat = "identity", alpha = 0.5, width = 0.75) +  # MIC frequency as bars (for one model)
  geom_line(data = combined_results_fT, aes(x = factor(MIC), y = PTA_DVCSF, group = Model, color = Model), size = 1.5) +  # Line plot for PTA curves for both models
  geom_point(data = combined_results_fT, aes(x = factor(MIC), y = PTA_DVCSF, shape = Model), color = "black", size = 3) +  # Black points with different shapes for both models
  geom_hline(yintercept = 90, linetype = "dashed", color = "black", size = 1.5) +  # Dashed line at 90% PTA
  scale_color_jco() +  # Use the JCO color scheme
  scale_fill_manual(values = c("MIC Frequency (%)" = "darkgray"), name = "MIC Distribution (%)") +  # Set color for MIC distribution bars, customize legend
  scale_y_continuous(name = "PTA (%)", breaks = seq(0, 100, by = 10)) +  # Y-axis limits and breaks
  facet_wrap(~ Dosing, scales = "free_x") +  # Facet by reordered dosing regimen with free x-axis scaling
  xlab("MIC (mg/L)") + 
  ylab("PTA (%) and MIC Distribution (%)") +
  ggtitle("PTA (fT > MIC 85% for CSF LZD concentration)") + 
  my_theme + 
  theme(
    strip.background = element_blank(),   # Clean up facet strip background
    strip.placement = "outside",          # Position facet strips outside the plot
    axis.text.y.right = element_text(color = "gray"),  # Make the right y-axis text gray to match the bars
    legend.title = element_text(size = 12),  # Customize the size of the legend title
    legend.position = "top"               # Position legend at the top
  )

# Combine both plots
combined_plot_PTA_fT <- ggarrange(PTA_fT_Plasma, PTA_fT_CSF, 
                                  ncol = 1, nrow = 2,  # Arrange plots vertically
                                  labels = c("A", "B"),  # Add labels to the plots (optional)
                                  common.legend = TRUE,  # Use a common legend for both plots
                                  legend = "top")  # Position the legend at the top








png("D:/MOBILITE/Charles B/VF/PTA_fT_MIC.png", width = 12, height = 16, units = 'in', res = 900)  # Specify width, height, and resolution

# Print the plot to the device
print(combined_plot_PTA_fT)

# Close the device
dev.off()





long_data <- mic_distribution %>%
  select(-Average_MIC) %>%  # Exclude the Average_MIC column
  tidyr::pivot_longer(
    cols = c("Staphylococcus_spp", "Enterococcus_spp", "Cutibacterium_acnes", "Streptococcus_spp"),
    names_to = "Species",
    values_to = "Count"
  )

# Calculate the total count per species for frequency calculation
long_data <- long_data %>%
  group_by(Species) %>%
  mutate(Frequency = Count / sum(Count) * 100)  # Calculate percentage frequency



MIC_data <- data.frame(
  MIC_value = c(0.002, 0.004, 0.008, 0.016, 0.030, 0.060, 0.125, 0.250, 0.500, 1.000, 2.000, 4.000, 8.000, 16.000, 32.000, 64.000, 128.000, 256.000, 512.000),
  Staphylococcus_spp = c(0, 0, 0, 0, 0, 14, 160, 220, 1886, 20605, 40954, 6736, 42, 28, 10, 2, 1, 0, 0),
  Enterococcus_spp = c(0, 0, 0, 0, 0, 0, 24, 63, 1026, 18608, 25193, 876, 30, 10, 8, 0, 0, 0, 0),
  Cutibacterium_acnes = c(0, 0, 0, 0, 0, 0, 0, 18, 184, 96, 6, 0, 0, 0, 0, 0, 0, 0, 0),
  Streptococcus_spp = c(0, 0, 0, 0, 0, 21, 297, 882, 9294, 63598, 19792, 31, 1, 0, 0, 0, 0, 0, 0)
)

# Convert data of each column to percentage of total
MIC_data_pct <- MIC_data
MIC_data_pct$Staphylococcus_spp <- (MIC_data$Staphylococcus_spp / sum(MIC_data$Staphylococcus_spp)) * 100
MIC_data_pct$Enterococcus_spp <- (MIC_data$Enterococcus_spp / sum(MIC_data$Enterococcus_spp)) * 100
MIC_data_pct$Cutibacterium_acnes <- (MIC_data$Cutibacterium_acnes / sum(MIC_data$Cutibacterium_acnes)) * 100
MIC_data_pct$Streptococcus_spp <- (MIC_data$Streptococcus_spp / sum(MIC_data$Streptococcus_spp)) * 100

# Display the data
print(MIC_data_pct)


MIC_data_melt <- melt(MIC_data_pct, id.vars = "MIC_value", 
                      variable.name = "Species", 
                      value.name = "Percentage")

# Convert MIC_value to factor
MIC_data_melt$MIC_value <- as.factor(MIC_data_melt$MIC_value)



total_distribution <- data.frame(
  MIC_value = c(0.002, 0.004, 0.008, 0.016, 0.030, 0.060, 0.125, 0.250, 
                0.500, 1.000, 2.000, 4.000, 8.000, 16.000, 32.000, 
                64.000, 128.000, 256.000, 512.000),
  Total_Distribution = c(0, 0, 0, 0, 0, 35, 481, 1183, 
                         12390, 102907, 85945, 7643, 73, 38, 
                         18, 2, 1, 0, 0)
)

# Filter total_distribution to only include MIC_value between 0.25 and 32
total_distribution <- total_distribution %>%
  filter(MIC_value >= 0.25 & MIC_value <= 32)

# Calculate percentage for the total distribution
total_sum <- sum(total_distribution$Total_Distribution)  # Total of the counts
total_distribution <- total_distribution %>%
  mutate(Percentage = (Total_Distribution / total_sum) * 100)

# Convert MIC_value to factor for the total distribution
total_distribution$MIC_value <- as.factor(total_distribution$MIC_value)

# Create a Species column for the total distribution
total_distribution$Species <- "Total Distribution"

# Melt the original data into long format
MIC_data_melt <- melt(MIC_data_pct, id.vars = "MIC_value", 
                      variable.name = "Species", 
                      value.name = "Percentage")

# Convert MIC_value to factor
MIC_data_melt$MIC_value <- as.factor(MIC_data_melt$MIC_value)

# Filter for MIC_value between 0.25 and 32 in MIC_data_pct
MIC_data_filtered <- MIC_data_melt %>%
  filter(as.numeric(as.character(MIC_value)) >= 0.25 & as.numeric(as.character(MIC_value)) <= 32)

# Replace underscores with spaces and make species names italic in the legend
MIC_data_filtered$Species <- gsub("_", " ", MIC_data_filtered$Species)

# Combine the filtered data with the total distribution
combined_data <- bind_rows(MIC_data_filtered, total_distribution)

# Create labels with total counts for the subtitle
totals <- MIC_data %>%
  summarise(
    Staphylococcus_spp = sum(Staphylococcus_spp),
    Enterococcus_spp = sum(Enterococcus_spp),
    Cutibacterium_acnes = sum(Cutibacterium_acnes),
    Streptococcus_spp = sum(Streptococcus_spp)
  )

labels <- paste0(c("Staphylococcus spp: ", "Enterococcus spp: ", 
                   "Cutibacterium acnes: ", "Streptococcus spp: ", 
                   "Total: "), 
                 c(as.character(c(totals$Staphylococcus_spp, totals$Enterococcus_spp, 
                                  totals$Cutibacterium_acnes, totals$Streptococcus_spp)),
                   sum(total_distribution$Total_Distribution)))

# Format the subtitle with a line break after the second count
subtitle_text <- paste(labels[1], labels[2], "\n", labels[3], labels[4], "\n", labels[5])


MIC_Distrib<-ggplot(combined_data, aes(x = MIC_value, y = Percentage, fill = Species)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), 
           color = ifelse(combined_data$Species == "Total Distribution", "black", NA),  # Add black border for Total Distribution
           size = ifelse(combined_data$Species == "Total Distribution", 1, 0)) +  # Set border size
  labs(
    title = "Distribution of MIC values and counts for each species", 
    subtitle = subtitle_text,
    x = "MIC Value",
    y = "Percentage (%)"
  ) +
  scale_fill_jco(labels = function(x) lapply(x, function(label) bquote(italic(.(label))))) +
  my_theme +
  theme(
    axis.title = element_text(size = 18, color = "black"),
    axis.text = element_text(size = 16, color = "black"),
    axis.line = element_line(linewidth = 1.5),
    legend.title = element_text(size = 18, color = "black"),
    legend.text = element_text(size = 16, color = "black")
  )



png("D:/MOBILITE/Charles B/VF/MIC Distribution.png", width = 12, height = 16, units = 'in', res = 900)  # Specify width, height, and resolution
print(MIC_Distrib)
dev.off()







# Reshape the data for creating the desired table
combined_results_fT <- combined_results_fT %>%
  mutate(Dosing = factor(Dosing, levels = c("600q12h", "600q8h", "600q6h", "1200q24hCI", "1800q24hCI", "2400q24hCI"))) %>%
  arrange(Dosing, Model)

# Create separate tables for Plasma and CSF
combined_results_fT_wide_plasma <- combined_results_fT %>%
  pivot_wider(
    id_cols = c(Dosing, Model),
    names_from = MIC,
    values_from = PTA_DVf,
    names_sep = "_"
  )

combined_results_fT_wide_csf <- combined_results_fT %>%
  pivot_wider(
    id_cols = c(Dosing, Model),
    names_from = MIC,
    values_from = PTA_DVCSF,
    names_sep = "_"
  )

# Update column names for better readability
names(combined_results_fT_wide_plasma)[-c(1, 2)] <- paste0("MIC = ", names(combined_results_fT_wide_plasma)[-c(1, 2)])
names(combined_results_fT_wide_plasma)[1:2] <- c("Dosing", "Model")
names(combined_results_fT_wide_plasma) <- gsub("_", " - MIC = ", names(combined_results_fT_wide_plasma))

names(combined_results_fT_wide_csf)[-c(1, 2)] <- paste0("MIC = ", names(combined_results_fT_wide_csf)[-c(1, 2)])
names(combined_results_fT_wide_csf)[1:2] <- c("Dosing", "Model")
names(combined_results_fT_wide_csf) <- gsub("_", " - MIC = ", names(combined_results_fT_wide_csf))

# Create flextables
pta_flextable_plasma <- flextable(combined_results_fT_wide_plasma) %>%
  set_header_labels(
    Dosing = "Dosing Regimen",
    Model = "Model"
  ) %>%
  theme_vanilla() %>%                  # Apply a clean vanilla theme
  bold(part = "header") %>%            # Make header bold
  align(align = "center", part = "header") %>%  # Center-align header
  align(align = "right", part = "body") %>%     # Right-align numeric data
  autofit() %>%                        # Adjust column widths to fit content
  fontsize(size = 10, part = "all")     # Set font size

pta_flextable_csf <- flextable(combined_results_fT_wide_csf) %>%
  set_header_labels(
    Dosing = "Dosing Regimen",
    Model = "Model"
  ) %>%
  theme_box() %>%
  autofit()

# Create Word documents and add the formatted tables
doc_plasma <- read_docx() %>%
    body_add_par(value = "PTA Plasma fT", style = "heading 1") %>%
  body_add_flextable(value = pta_flextable_plasma)

print(doc_plasma, target = "pta_plasma_dT.docx")

doc_csf <- read_docx() %>%
    body_add_par(value = "PTA CSF fT", style = "heading 1") %>%
  body_add_flextable(value = pta_flextable_csf)

print(doc_csf, target = "pta_csf_fT.docx")






# Reshape the data for creating the desired table
combined_PTA_AUC_results <- combined_PTA_AUC_results %>%
  mutate(Dosing = factor(Dosing, levels = c("600q12h", "600q8h", "600q6h", "1200q24hCI", "1800q24hCI", "2400q24hCI"))) %>%
  arrange(Dosing, Model)

# Create separate tables for Plasma and CSF
combined_PTA_AUC_wide_plasma <- combined_PTA_AUC_results %>%
  pivot_wider(
    id_cols = c(Dosing, Model),
    names_from = MIC,
    values_from = PTA_AUCP,
    names_sep = "_"
  )

combined_PTA_AUC_wide_csf <- combined_PTA_AUC_results %>%
  pivot_wider(
    id_cols = c(Dosing, Model),
    names_from = MIC,
    values_from = PTA_AUCCSF,
    names_sep = "_"
  )

# Update column names for better readability
names(combined_PTA_AUC_wide_plasma)[-c(1, 2)] <- paste0("MIC = ", names(combined_PTA_AUC_wide_plasma)[-c(1, 2)])
names(combined_PTA_AUC_wide_plasma)[1:2] <- c("Dosing", "Model")
names(combined_PTA_AUC_wide_plasma) <- gsub("_", " - MIC = ", names(combined_PTA_AUC_wide_plasma))

names(combined_PTA_AUC_wide_csf)[-c(1, 2)] <- paste0("MIC = ", names(combined_PTA_AUC_wide_csf)[-c(1, 2)])
names(combined_PTA_AUC_wide_csf)[1:2] <- c("Dosing", "Model")
names(combined_PTA_AUC_wide_csf) <- gsub("_", " - MIC = ", names(combined_PTA_AUC_wide_csf))

# Create flextables
auc_flextable_plasma <- flextable(combined_PTA_AUC_wide_plasma) %>%
  set_header_labels(
    Dosing = "Dosing Regimen",
    Model = "Model"
  ) %>%
  theme_vanilla() %>%                  # Apply a clean vanilla theme
  bold(part = "header") %>%            # Make header bold
  align(align = "center", part = "header") %>%  # Center-align header
  align(align = "right", part = "body") %>%     # Right-align numeric data
  autofit() %>%                        # Adjust column widths to fit content
  fontsize(size = 10, part = "all")     # Set font size

auc_flextable_csf <- flextable(combined_PTA_AUC_wide_csf) %>%
  set_header_labels(
    Dosing = "Dosing Regimen",
    Model = "Model"
  ) %>%
  theme_box() %>%
  autofit()

# Create Word documents and add the formatted tables
doc_plasma <- read_docx() %>%
    body_add_par(value = "PTA AUC/MIC > 100 in Plasma", style = "heading 1") %>%
  body_add_flextable(value = auc_flextable_plasma)

print(doc_plasma, target = "pta_auc_plasma.docx")

doc_csf <- read_docx() %>%
    body_add_par(value = "PTA AUC/MIC > 100 in CSF ", style = "heading 1") %>%
  body_add_flextable(value = auc_flextable_csf)

print(doc_csf, target = "pta_auc_csf.docx")
